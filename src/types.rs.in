/// A generic struct that represents the paged API responses that the
/// Stash API returns for certain endpoints.
#[derive(Debug, Deserialize, PartialEq)]
pub struct PagedResponse<T> {
    pub size: u32,
    pub limit: u32,
    #[serde(rename="isLastPage")]
    pub is_last_page: bool,
    pub values: Vec<T>,
    pub start: u32,
    pub filter: Option<u32>,
    #[serde(rename="nextPageStart")]
    pub next_page_start: Option<u32>,
}

#[derive(Default)]
pub struct ProjectListParams {
    params: HashMap<&'static str, String>
}

impl ProjectListParams {
    pub fn new() -> ProjectListParams {
        ProjectListParams { ..Default::default() }
    }
    pub fn builder() -> ProjectListParamsBuilder {
        ProjectListParamsBuilder::new()
    }
    
    /// Generate a query string of the parameters. Returns None if no options are defined.
    pub fn to_query_string(&self) -> Option<String> {
        if self.params.is_empty() {
            None
        } else {
            let query_string = form_urlencoded::Serializer::new(String::new())
                .extend_pairs(&self.params)
                .finish();
            trace!("ProjectListParams.to_query_string={}", query_string);
            Some(query_string)
        }
    }
}

#[derive(Default)]
pub struct ProjectListParamsBuilder {
    params: HashMap<&'static str, String>
}

impl ProjectListParamsBuilder {
    pub fn new() -> ProjectListParamsBuilder {
        ProjectListParamsBuilder { ..Default::default() }
    }
    
    // set the 'name' field of the Projects request
    pub fn repo_name<'a>(&mut self, arg: String) -> &mut ProjectListParamsBuilder {
        self.params.insert("name", arg);
        self
    }
    
    // Set the 'permission' field of the Projects request
    pub fn permissions(&mut self, permission: Permission) -> &mut ProjectListParamsBuilder {
        self.params.insert("permission", String::from(permission.as_ref()));
        self
    }
    
    pub fn build(&self) -> ProjectListParams {
        ProjectListParams { params: self.params.clone() }
    }
}

#[derive(Debug, Deserialize, PartialEq)]
pub struct Project {
    pub key: String,
    pub id: u32,
    pub name: String,
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,
    pub public: bool,
    #[serde(rename="type")]
    pub project_type: String,
    pub link: serde_json::Value,
    pub links: serde_json::Value
}

#[derive(Debug, Deserialize, PartialEq)]
pub struct Repository {
    pub slug: String,
    pub id: u32,
    pub name: String,
    #[serde(rename="scmId")]
    pub scm: ScmType,
    pub state: RepositoryState,
    #[serde(rename="statusMessage")]
    pub status_message: String,
    pub forkable: bool,
    pub project: Project,
    pub public: bool,
    #[serde(rename="cloneUrl")]
    pub clone_url: String,
    pub link: serde_json::Value,
    pub links: serde_json::Value
}

#[derive(Debug, Deserialize, PartialEq)]
pub struct Branch {
    pub id: String,
    #[serde(rename="displayId")]
    pub display_id: String,
    #[serde(rename="latestChangeset")]
    pub latest_changeset: String,
    #[serde(rename="latestCommit")]
    pub latest_commit: String,
    #[serde(rename="isDefault")]
    pub is_default: bool
}


#[derive(Default)]
pub struct RepositoryParamsBuilder {
    pub name: Option<String>,
    pub scm: Option<ScmType>,
    pub forkable: Option<bool>
}

impl RepositoryParamsBuilder {
    pub fn new() -> RepositoryParamsBuilder {
        RepositoryParamsBuilder { ..Default::default() }
    }
    
    pub fn name<T>(&mut self, name: T) -> &mut RepositoryParamsBuilder
        where T: Into<String>
    {
        self.name = Some(name.into());
        self
    }
    
    pub fn scm(&mut self, scm: ScmType) -> &mut RepositoryParamsBuilder {
        self.scm = Some(scm);
        self
    }
    
    pub fn forkable(&mut self, forkable: bool) -> &mut RepositoryParamsBuilder {
        self.forkable = Some(forkable);
        self
    }
    
    pub fn build(&self) -> RepositoryParams {
        RepositoryParams {
            name: self.name.clone(),
            scm: self.scm.clone(),
            forkable: self.forkable
        }
    }
}


#[derive(Debug, Serialize)]
pub struct RepositoryParams {
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if="Option::is_none")]
    #[serde(rename="scmId")]
    pub scm: Option<ScmType>,
    #[serde(skip_serializing_if="Option::is_none")]
    pub forkable: Option<bool>
}

impl RepositoryParams {
    pub fn new<T>(name: Option<T>, scm: Option<ScmType>, forkable: Option<bool>) -> RepositoryParams
        where T: Into<String>
    {
        RepositoryParams {
            name: name.map(|n| n.into()),
            scm: scm,
            forkable: forkable,
        }
    }
    
    pub fn builder() -> RepositoryParamsBuilder {
        RepositoryParamsBuilder::new()
    }
}

#[derive(Default)]
pub struct ProjectParamsBuilder {
    pub key: Option<String>,
    pub name: Option<String>,
    pub description: Option<String>,
    pub avatar: Option<String>
}

impl ProjectParamsBuilder {
    pub fn new() -> ProjectParamsBuilder {
        ProjectParamsBuilder { ..Default::default() }
    }
    
    pub fn key<T>(&mut self, key: T) -> &mut ProjectParamsBuilder
        where T: Into<String>
    {
        self.key = Some(key.into());
        self
    }
    
    pub fn name<T>(&mut self, name: T) -> &mut ProjectParamsBuilder
        where T: Into<String>
    {
        self.name = Some(name.into());
        self
    }
    
    pub fn description<T>(&mut self, description: T) -> &mut ProjectParamsBuilder
        where T: Into<String>
    {
        self.description = Some(description.into());
        self
    }
    
    pub fn avatar<T>(&mut self, avatar: T) -> &mut ProjectParamsBuilder
        where T: Into<String>
    {
        self.avatar = Some(avatar.into());
        self
    }
    
    pub fn build(&self) -> ProjectParams {
        ProjectParams {
            key: self.key.clone(),
            name: self.name.clone(),
            description: self.description.clone(),
            avatar: self.avatar.clone()
        }
    }
}

#[derive(Debug, Serialize)]
pub struct ProjectParams {
    #[serde(skip_serializing_if="Option::is_none")]
    key: Option<String>,
    #[serde(skip_serializing_if="Option::is_none")]
    name: Option<String>,
    #[serde(skip_serializing_if="Option::is_none")]
    description: Option<String>,
    #[serde(skip_serializing_if="Option::is_none")]
    avatar: Option<String>
}

impl ProjectParams {
    pub fn new<T>(key: Option<T>, name: Option<T>, description: Option<T>, avatar: Option<T>) -> ProjectParams
        where T: Into<String>
    {
        ProjectParams {
            key: key.map(|k| k.into()),
            name: name.map(|n| n.into()),
            description: description.map(|d| d.into()),
            avatar: avatar.map(|a| a.into())
        }
    }
    
    pub fn builder() -> ProjectParamsBuilder {
        ProjectParamsBuilder::new()
    }
}